{"version":3,"sources":["components/CustomAppBar.jsx","helpers/generateQuestions.js","helpers/calculateRounds.js","components/gameComponents/SetupGame.jsx","components/gameComponents/Task.jsx","components/Game.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["CustomAppBar","props","AppBar","position","Toolbar","Typography","variant","style","flexGrow","gameState","currentRound","align","rounds","allQuestions","numberOfQuestions","length","players","toReturn","Math","floor","Infinity","SetupGame","useState","playerName","setPlayerName","submitPressed","setsubmitPressed","nameTaken","setNameTaken","checkNameTaken","name","console","log","toLowerCase","addPlayerToGame","trim","push","colour","randomColour","luminosity","updateGameState","Grid","container","direction","justify","alignItems","spacing","item","TextField","label","value","onChange","e","target","onKeyDown","key","error","type","calculateRounds","size","InputProps","inputProps","min","inputtedValue","calculatedMax","Button","color","onClick","started","disabled","Box","xs","map","player","playerIndex","Card","CardContent","Avatar","backgroundColor","display","marginRight","HighlightOffRounded","verticalAlign","splice","Task","currentPlayer","playerCounter","questions","Game","setGameState","newValue","useEffect","generatedQuestions","shuffleArray","height","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4b5ae770.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar, Typography } from \"@material-ui/core\";\r\nimport { Toolbar } from \"@material-ui/core\";\r\n\r\nconst CustomAppBar = (props) => {\r\n  return (\r\n    <AppBar position=\"sticky\">\r\n      <Toolbar>\r\n        <Typography variant=\"h5\" style={{ flexGrow: 1 }}>\r\n          Taskmaster\r\n        </Typography>\r\n\r\n        {props.gameState.currentRound > 0 && (\r\n          <Typography variant=\"h6\" align=\"right\">\r\n            Round: {props.gameState.currentRound}/{props.gameState.rounds}\r\n          </Typography>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default CustomAppBar;\r\n","import shuffleArray from \"shuffle-array\";\r\n\r\nconst allQuestions = [\r\n  \"Put a Tooth Brush in your Ear\",\r\n  \"Draw a Dick and show me\",\r\n  \"Down your Drink (within Reason)\",\r\n  \"Get Some School Uniform\",\r\n  \"Describe a film without using: any words in the title, the actor's names or the character's names.\",\r\n  \"Do 5 Press-Ups\",\r\n  \"Un-Plug the Nearest Cable and Show Me Both Ends\",\r\n  \"Do an Impression of Someone (Time Stops When We Guess Right)\",\r\n  \"Name 5 Countries Beginning with A\",\r\n  \"Put a Hat on\",\r\n  \"Find a Printed Photo of Yourself\",\r\n  \"Say Something Nice about Trump\",\r\n  \"put your sock on your head\",\r\n  \"Balance a Coin on Your Nose\",\r\n  \"Grab Something Orange\",\r\n  \"Insult the Person who went before you\",\r\n  \"Compliment the Person who went before you\",\r\n  \"Name Everyone in the call\",\r\n  \"Put us upside down\",\r\n  \"Tell us something %NAME% doesn't know\",\r\n  \"Grab a Whisk\",\r\n  \"Write BOOBS on a calculator\",\r\n  \"Whistle/Hum a tune for us to guess\",\r\n  \"Take out a light bulb and put it above your head\",\r\n  \"Grab a Square of Toilet Paper\",\r\n  \"Do a Hand Stand\",\r\n  \"Ice cube in your mouth\",\r\n  \"Make a Paper airplane\",\r\n  \"Get Something made from Aluminium\",\r\n  \"Name 5 Restaurants in %CITY%\",\r\n  \"Get a Cheese Grater\",\r\n  \"Charades Round\",\r\n  \"Do 10 Star Jumps\",\r\n  \"Name 5 films with Matt Damon in them\",\r\n  \"Balance a pen upright\",\r\n  \"Show us the sky\",\r\n  \"Eat something\",\r\n  \"Put on some uni branded clothes\",\r\n  \"Tell me something I didn't know\",\r\n  \"Send me a Meme\",\r\n  \"Get your Sock Wet\",\r\n  \"Tear a piece of paper in half\",\r\n  \"Read the first word on page 34 of a book\",\r\n  \"Grab Something that is from IKEA\",\r\n  \"Type the Alphabet in the Zoom Chat\",\r\n  \"10 Star Jumps\",\r\n  \"Take a Pillow Case off a Pillow and Put it on your Head\",\r\n  \"Make an Annoying Noise\",\r\n  \"Say Hello in five languages (other than english)\",\r\n  \"Find Two Left Shoes\",\r\n  \"Show Me Something Alive\",\r\n  \"Tell a Joke\",\r\n  \"Get a candle\",\r\n];\r\n\r\nconst numberOfQuestions = allQuestions.length;\r\n\r\nexport default () => {\r\n  const shuffledQuestions = shuffleArray(allQuestions);\r\n\r\n  return shuffledQuestions;\r\n};\r\n\r\nexport { allQuestions, numberOfQuestions };\r\n","import { numberOfQuestions } from \"./generateQuestions\";\r\n\r\nexport default (players) => {\r\n  const toReturn = Math.floor(numberOfQuestions / players);\r\n  if (toReturn === Infinity) return 1;\r\n  return toReturn;\r\n};\r\n","import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { HighlightOffRounded } from \"@material-ui/icons\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport randomColour from \"randomcolor\";\r\nimport generateQuestions from \"../../helpers/generateQuestions\";\r\nimport calculateRounds from \"../../helpers/calculateRounds\";\r\n\r\nconst SetupGame = (props) => {\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [submitPressed, setsubmitPressed] = useState(false);\r\n  const [nameTaken, setNameTaken] = useState(false);\r\n\r\n  const checkNameTaken = (name) => {\r\n    let players = props.gameState.players;\r\n    console.log(players);\r\n    if (!name) return;\r\n\r\n    for (const player of players) {\r\n      if (player.name.toLowerCase() == name.toLowerCase()) {\r\n        setNameTaken(true);\r\n        return;\r\n      }\r\n    }\r\n    setNameTaken(false);\r\n  };\r\n\r\n  const addPlayerToGame = () => {\r\n    let playerNameToUse = playerName;\r\n    if (!playerNameToUse.trim()) {\r\n      setsubmitPressed(true);\r\n      return;\r\n    }\r\n\r\n    if (nameTaken) {\r\n      return;\r\n    }\r\n\r\n    let players = props.gameState.players;\r\n\r\n    players.push({\r\n      name: playerName,\r\n      colour: randomColour({ luminosity: \"bright\" }),\r\n    });\r\n\r\n    props.updateGameState({\r\n      players: players,\r\n    });\r\n\r\n    setPlayerName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justify=\"flex-start\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n      >\r\n        <Grid item>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            label=\"Player Name\"\r\n            value={playerName}\r\n            onChange={(e) => {\r\n              setPlayerName(e.target.value);\r\n              setsubmitPressed(false);\r\n              checkNameTaken(e.target.value);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                addPlayerToGame();\r\n              }\r\n            }}\r\n            error={(!playerName && submitPressed) || nameTaken}\r\n          />\r\n        </Grid>\r\n        {/* Button Grid */}\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n          spacing={2}\r\n        >\r\n          <Grid item>\r\n            <TextField\r\n              type=\"number\"\r\n              label={\r\n                \"Rounds (max: \" +\r\n                calculateRounds(props.gameState.players.length) +\r\n                \")\"\r\n              }\r\n              size=\"small\"\r\n              variant={\"outlined\"}\r\n              InputProps={{\r\n                inputProps: {\r\n                  value: props.gameState.rounds,\r\n                  min: 1,\r\n                },\r\n              }}\r\n              onChange={(e) => {\r\n                let inputtedValue = e.target.value;\r\n                let calculatedMax = calculateRounds(\r\n                  props.gameState.players.length\r\n                );\r\n                if (inputtedValue > calculatedMax) {\r\n                  inputtedValue = calculatedMax;\r\n                }\r\n                if (inputtedValue < 1) {\r\n                  inputtedValue = 1;\r\n                }\r\n\r\n                props.updateGameState({ rounds: inputtedValue });\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                addPlayerToGame();\r\n              }}\r\n            >\r\n              Add Player\r\n            </Button>\r\n          </Grid>\r\n          {props.gameState.players.length >= 2 && (\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => {\r\n                  props.updateGameState({ started: true });\r\n                }}\r\n                disabled={\r\n                  props.gameState.rounds >\r\n                  calculateRounds(props.gameState.players.length)\r\n                }\r\n              >\r\n                Start Game\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Playerlist Grid */}\r\n      <Box xs={2} />\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"flex-start\"\r\n        spacing={2}\r\n      >\r\n        {props.gameState.players.map((player, playerIndex) => {\r\n          return (\r\n            <Grid item>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography>\r\n                    <Avatar\r\n                      style={{\r\n                        backgroundColor: player.colour,\r\n                        display: \"inline-flex\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                    >\r\n                      {player.name[0]}\r\n                    </Avatar>\r\n                    {player.name}\r\n                    &nbsp;\r\n                    <HighlightOffRounded\r\n                      style={{ verticalAlign: \"middle\" }}\r\n                      onClick={() => {\r\n                        let players = props.gameState.players;\r\n                        players.splice(playerIndex, 1);\r\n                        props.updateGameState({ players: players });\r\n                        checkNameTaken();\r\n                      }}\r\n                    />\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetupGame;\r\n","import { Button, Typography } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const currentPlayer =\r\n    props.gameState.players[\r\n      props.gameState.playerCounter % props.gameState.players.length\r\n    ];\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h3\">Current Player: {currentPlayer.name}</Typography>\r\n      <Typography variant=\"h4\">\r\n        {props.gameState.questions[props.gameState.playerCounter]}\r\n      </Typography>\r\n      <Button\r\n        onClick={() => {\r\n          props.updateGameState({\r\n            playerCounter: props.gameState.playerCounter + 1,\r\n          });\r\n        }}\r\n      >\r\n        Next Player\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport generateQuestions from \"../helpers/generateQuestions\";\r\nimport CustomAppBar from \"./CustomAppBar\";\r\nimport SetupGame from \"./gameComponents/SetupGame\";\r\nimport Task from \"./gameComponents/Task\";\r\n\r\nconst Game = () => {\r\n  const [gameState, setGameState] = useState({\r\n    players: [],\r\n    started: false,\r\n    questions: [],\r\n    rounds: 4,\r\n    currentRound: -1,\r\n    playerCounter: 0,\r\n  });\r\n\r\n  const updateGameState = (newValue) => {\r\n    setGameState({ ...gameState, ...newValue });\r\n  };\r\n\r\n  //Setup Questions When Game Starts\r\n  useEffect(() => {\r\n    if (gameState.started) {\r\n      //Load All Questions into gamestate in random order\r\n      let generatedQuestions = generateQuestions();\r\n      updateGameState({ questions: generatedQuestions, currentRound: 1 });\r\n    }\r\n  }, [gameState.started]);\r\n\r\n  //Count rounds and goes\r\n  useEffect(() => {\r\n    if (gameState.playerCounter % gameState.players.length === 0)\r\n      updateGameState({ currentRound: gameState.currentRound + 1 });\r\n  }, [gameState.playerCounter]);\r\n\r\n  return (\r\n    <>\r\n      <CustomAppBar gameState={gameState} />\r\n      <div style={{ height: \"10px\" }} />\r\n      {!gameState.started && (\r\n        <SetupGame gameState={gameState} updateGameState={updateGameState} />\r\n      )}\r\n      {gameState.started && (\r\n        <Task gameState={gameState} updateGameState={updateGameState} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import { AppBar, Typography } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomAppBar from \"./CustomAppBar\";\r\nimport Game from \"./Game\";\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <>\r\n      <Game />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Home from \"./components/Home\";\r\n\r\nfunction App() {\r\n  const [players, setPlayers] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <Home />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}