{"version":3,"sources":["components/CustomAppBar.jsx","helpers/generateQuestions.js","helpers/calculateRounds.js","components/gameComponents/SetupGame.jsx","components/gameComponents/Task.jsx","helpers/getNonCurrentPlayer.js","helpers/sortPlayersByScore.js","components/gameComponents/ScoreBoard.jsx","components/Game.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["CustomAppBar","props","AppBar","position","Toolbar","Typography","variant","style","flexGrow","gameState","started","align","currentRound","rounds","allQuestions","numberOfQuestions","length","players","toReturn","Math","floor","Infinity","SetupGame","useState","playerName","setPlayerName","submitPressed","setsubmitPressed","nameTaken","setNameTaken","checkNameTaken","name","console","log","toLowerCase","addPlayerToGame","trim","push","colour","randomColour","luminosity","updateGameState","Grid","container","direction","justify","alignItems","spacing","item","TextField","label","value","onChange","e","target","onKeyDown","key","error","type","calculateRounds","size","InputProps","inputProps","min","inputtedValue","calculatedMax","Button","color","onClick","disabled","Box","xs","map","player","playerIndex","Card","CardContent","Avatar","backgroundColor","display","marginRight","HighlightOffRounded","verticalAlign","splice","Task","currentPlayer","playerCounter","playerCardTheme","createMuiTheme","palette","background","paper","text","primary","currentQuestion","setCurrentQuestion","taskFlipped","setTaskFlipped","useEffect","question","questions","playerToReplaceNameWith","allPlayers","playerToReturn","randomItem","getNonCurrentPlayer","replace","playerStarted","setPlayerStarted","useCountdown","timeLeft","actions","ThemeProvider","theme","isFlipped","start","minHeight","minWidth","preventDefault","reset","pause","score","logScore","sortByScore","a","b","scoreA","scoreB","ScoreBoard","playersOrdered","setPlayersOrdered","currentPlayers","sort","Paper","elevation","padding","List","ListItem","ListItemAvatar","ListItemText","secondary","scoreBoard","Game","setGameState","newValue","generatedQuestions","shuffleArray","height","Home","default","CssBaseline","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b2959dcf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Typography } from \"@material-ui/core\";\nimport { Toolbar } from \"@material-ui/core\";\n\nconst CustomAppBar = (props) => {\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar>\n        <Typography variant=\"h5\" style={{ flexGrow: 1 }}>\n          Taskmaster\n        </Typography>\n\n        {props.gameState.started && (\n          <Typography variant=\"h6\" align=\"right\">\n            Round: {props.gameState.currentRound}/{props.gameState.rounds}\n          </Typography>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default CustomAppBar;\n","import shuffleArray from \"shuffle-array\";\n\nconst allQuestions = [\n    \"Find a toothbrush\",\n    \"Find a TV remote\",\n    \"Find a bottle opener\",\n    \"Find a jar of something\",\n    \"Find a key\",\n    \"Drink something\",\n    \"Find something that begins with the letter B\",\n    \"Find something orange\",\n    \"Find something soft\",\n    \"Find a battery\",\n    \"Find something round / circular\",\n    \"Name 4 IBM UK Locations\",\n    \"Describe a film without using: any words in the title, the actor's names or the character's names.\",\n    \"Do 5 Press-Ups\",\n    \"Un-Plug the Nearest Cable and Show Me Both Ends\",\n    \"Do an Impression of Someone (Time Stops When We Guess Right)\",\n    \"Name 5 Countries Beginning with A\",\n    \"Put a Hat on\",\n    \"Find a Printed Photo of Yourself\",\n    \"Say Something Nice about Trump\",\n    \"put your sock on your head\",\n    \"Balance a Coin on Your Nose\",\n    \"Find Something Orange\",\n    \"Compliment the Person who went before you\",\n    \"Name Everyone in the call\",\n    \"Put us upside down\",\n    \"Tell us something %NAME% doesn't know\",\n    \"Find a Whisk\",\n    \"Whistle/Hum a tune for us to guess\",\n    \"Take out a light bulb and put it above your head\",\n    \"Grab a Square of Toilet Paper\",\n    \"Ice cube in your mouth\",\n    \"Make a Paper airplane\",\n    \"Get Something made from Aluminium\",\n    \"Get a Cheese Grater\",\n    \"Do 10 Star Jumps\",\n    \"Name 3 films with Matt Damon in them\",\n    \"Balance a pen upright\",\n    \"Show us the sky\",\n    \"Eat something\",\n    \"Find some IBM merch\",\n    \"Tell me something I didn't know\",\n    \"Send me a Meme\",\n    \"Tear a piece of paper in half\",\n    \"Read the first word on page 34 of a book\",\n    \"Grab Something that is from IKEA\",\n    \"Type the Alphabet in the WebEx Chat\",\n    \"10 Star Jumps\",\n    \"Take a Pillow Case off a Pillow and Put it on your Head\",\n    \"Make an Annoying Noise\",\n    \"Say Hello in five languages (other than english)\",\n    \"Find Two Left Shoes\",\n    \"Show Me Something Alive\",\n    \"Tell a Joke\",\n    \"Get a candle\",\n    \"Name 3 applications our team runs\",\n    \"Name 2 previous interns\",\n];\n\nconst numberOfQuestions = allQuestions.length;\n\nexport default () => {\n    const shuffledQuestions = shuffleArray(allQuestions);\n\n    return shuffledQuestions;\n};\n\nexport { allQuestions, numberOfQuestions };\n","import { numberOfQuestions } from \"./generateQuestions\";\n\nexport default (players) => {\n  const toReturn = Math.floor(numberOfQuestions / players);\n  if (toReturn === Infinity) return 1;\n  return toReturn;\n};\n","import {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { HighlightOffRounded } from \"@material-ui/icons\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport randomColour from \"randomcolor\";\nimport generateQuestions from \"../../helpers/generateQuestions\";\nimport calculateRounds from \"../../helpers/calculateRounds\";\n\nconst SetupGame = (props) => {\n  const [playerName, setPlayerName] = useState(\"\");\n  const [submitPressed, setsubmitPressed] = useState(false);\n  const [nameTaken, setNameTaken] = useState(false);\n\n  const checkNameTaken = (name) => {\n    let players = props.gameState.players;\n    console.log(players);\n    if (!name) return;\n\n    for (const player of players) {\n      if (player.name.toLowerCase() == name.toLowerCase()) {\n        setNameTaken(true);\n        return;\n      }\n    }\n    setNameTaken(false);\n  };\n\n  const addPlayerToGame = () => {\n    let playerNameToUse = playerName;\n    if (!playerNameToUse.trim()) {\n      setsubmitPressed(true);\n      return;\n    }\n\n    if (nameTaken) {\n      return;\n    }\n\n    let players = props.gameState.players;\n\n    players.push({\n      name: playerName,\n      colour: randomColour({ luminosity: \"light\" }),\n    });\n\n    props.updateGameState({\n      players: players,\n    });\n\n    setPlayerName(\"\");\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Grid item>\n          <TextField\n            variant=\"outlined\"\n            label=\"Player Name\"\n            value={playerName}\n            onChange={(e) => {\n              setPlayerName(e.target.value);\n              setsubmitPressed(false);\n              checkNameTaken(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                addPlayerToGame();\n              }\n            }}\n            error={(!playerName && submitPressed) || nameTaken}\n          />\n        </Grid>\n        {/* Button Grid */}\n        <Grid\n          item\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"flex-start\"\n          spacing={2}\n        >\n          <Grid item>\n            <TextField\n              type=\"number\"\n              label={\n                \"Rounds (max: \" +\n                calculateRounds(props.gameState.players.length) +\n                \")\"\n              }\n              size=\"small\"\n              variant={\"outlined\"}\n              InputProps={{\n                inputProps: {\n                  value: props.gameState.rounds,\n                  min: 1,\n                },\n              }}\n              onChange={(e) => {\n                let inputtedValue = e.target.value;\n                let calculatedMax = calculateRounds(\n                  props.gameState.players.length\n                );\n                if (inputtedValue > calculatedMax) {\n                  inputtedValue = calculatedMax;\n                }\n                if (inputtedValue < 1) {\n                  inputtedValue = 1;\n                }\n\n                props.updateGameState({ rounds: inputtedValue });\n              }}\n            />\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                addPlayerToGame();\n              }}\n            >\n              Add Player\n            </Button>\n          </Grid>\n          {props.gameState.players.length >= 2 && (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  props.updateGameState({ started: true });\n                }}\n                disabled={\n                  props.gameState.rounds >\n                  calculateRounds(props.gameState.players.length)\n                }\n              >\n                Start Game\n              </Button>\n            </Grid>\n          )}\n        </Grid>\n      </Grid>\n\n      {/* Playerlist Grid */}\n      <Box xs={2} />\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"flex-start\"\n        spacing={2}\n      >\n        {props.gameState.players.map((player, playerIndex) => {\n          return (\n            <Grid item>\n              <Card>\n                <CardContent>\n                  <Typography>\n                    <Avatar\n                      style={{\n                        backgroundColor: player.colour,\n                        display: \"inline-flex\",\n                        marginRight: \"10px\",\n                        color: \"black\",\n                      }}\n                    >\n                      {player.name[0]}\n                    </Avatar>\n                    {player.name}\n                    &nbsp;\n                    <HighlightOffRounded\n                      style={{ verticalAlign: \"middle\" }}\n                      onClick={() => {\n                        let players = props.gameState.players;\n                        players.splice(playerIndex, 1);\n                        props.updateGameState({ players: players });\n                        checkNameTaken();\n                      }}\n                    />\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n\nexport default SetupGame;\n","import {\n  Button,\n  Card,\n  CardContent,\n  createMuiTheme,\n  Grid,\n  ThemeProvider,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport getNonCurrentPlayer from \"../../helpers/getNonCurrentPlayer\";\nimport ReactCardFlip from \"react-card-flip\";\nimport useCountdown from \"react-countdown-hook\";\n\nconst Task = (props) => {\n  const currentPlayer =\n    props.gameState.players[\n      props.gameState.playerCounter % props.gameState.players.length\n    ];\n\n  const playerCardTheme = createMuiTheme({\n    palette: {\n      background: {\n        paper: currentPlayer.colour,\n      },\n      text: {\n        primary: \"#000000\",\n      },\n    },\n  });\n\n  const [currentQuestion, setCurrentQuestion] = useState(\"NO QUESTION LOADED\");\n  const [taskFlipped, setTaskFlipped] = useState(false);\n\n  useEffect(() => {\n    //Fill in %NAME% in question\n    let question = props.gameState.questions[props.gameState.playerCounter];\n\n    let playerToReplaceNameWith = getNonCurrentPlayer(\n      props.gameState.players,\n      props.gameState.players[\n        props.gameState.playerCounter % props.gameState.players.length\n      ]\n    );\n\n    question = question?.replace(\"%NAME%\", playerToReplaceNameWith.name);\n\n    if (question) setCurrentQuestion(question);\n  }, [props.gameState.playerCounter, props.gameState.questions]);\n\n  const [playerStarted, setPlayerStarted] = useState(false);\n  const startCountdown = () => {\n    actions.start();\n    setPlayerStarted(true);\n  };\n  const [timeLeft, actions] = useCountdown(30 * 1000, 1000);\n\n  useEffect(() => {\n    if (timeLeft == 0) {\n      setTaskFlipped(false);\n      setPlayerStarted(false);\n    }\n  }, [timeLeft]);\n\n  const logScore = () => {\n    let players = props.gameState.players;\n    let currentPlayer =\n      players[props.gameState.playerCounter % props.gameState.players.length];\n    currentPlayer.score = (currentPlayer.score || 0) + timeLeft / 1000;\n    players[\n      props.gameState.playerCounter % props.gameState.players.length\n    ] = currentPlayer;\n    props.updateGameState({ players: players });\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={playerCardTheme}>\n        <Grid\n          container\n          justify=\"flex-start\"\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Countdown and player card */}\n          <Grid item>\n            <Card theme={playerCardTheme}>\n              <CardContent>\n                <Typography variant=\"h3\">{currentPlayer.name}</Typography>\n                <hr />\n                {playerStarted ? (\n                  <Typography variant=\"h3\" align=\"center\">\n                    00:{timeLeft < 10000 && \"0\"}\n                    {timeLeft / 1000}\n                  </Typography>\n                ) : (\n                  <Typography variant=\"h3\" align=\"center\">\n                    00:30\n                  </Typography>\n                )}\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Task Card */}\n          <Grid item>\n            <ReactCardFlip isFlipped={taskFlipped}>\n              <Card\n                onClick={() => {\n                  if (playerStarted) return;\n                  console.log(\"Outside onclick called\");\n                  setTaskFlipped(!taskFlipped);\n                  startCountdown();\n                }}\n              >\n                <CardContent>\n                  <Grid\n                    container\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    style={{ minHeight: \"100px\", minWidth: \"100px\" }}\n                  >\n                    <Grid item>\n                      {playerStarted ? (\n                        <Grid\n                          container\n                          justify=\"center\"\n                          alignItems=\"center\"\n                          direction=\"column\"\n                          spacing={2}\n                        >\n                          <Grid item>\n                            <Typography variant=\"h4\" align=\"center\">\n                              You scored {timeLeft / 1000} points\n                            </Typography>\n                          </Grid>\n                          <Grid item>\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              onClick={(e) => {\n                                e.preventDefault();\n                                props.updateGameState({\n                                  playerCounter:\n                                    props.gameState.playerCounter + 1,\n                                });\n                                setPlayerStarted(false);\n                                actions.reset();\n                              }}\n                            >\n                              Next Player\n                            </Button>\n                          </Grid>\n                        </Grid>\n                      ) : (\n                        <Typography variant=\"h4\" align=\"center\">\n                          Your Task\n                        </Typography>\n                      )}\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n\n              <Card\n                style={{ minHeight: \"100px\", minWidth: \"100px\" }}\n                onClick={() => {\n                  actions.pause();\n                  setTaskFlipped(false);\n                  logScore();\n                }}\n              >\n                <CardContent>\n                  <Grid\n                    container\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    style={{ minHeight: \"100px\", minWidth: \"100px\" }}\n                  >\n                    <Grid item>\n                      <Typography variant=\"h4\">{currentQuestion}</Typography>\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </ReactCardFlip>\n          </Grid>\n        </Grid>\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default Task;\n","import randomItem from \"random-item\";\n\nexport default (allPlayers, currentPlayer) => {\n  let playerToReturn = {};\n  while (playerToReturn.name !== currentPlayer.name) {\n    playerToReturn = randomItem(allPlayers);\n  }\n  return playerToReturn;\n};\n","export default (players) => {\n  return players.sort(sortByScore);\n};\n\nlet sortByScore = (a, b) => {\n  let scoreA = a.score || 0;\n  let scoreB = b.score || 0;\n\n  if (scoreA < scoreB) return 1;\n  if (scoreA > scoreB) return -1;\n  return 0;\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  List,\n  ListItemText,\n  Typography,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  Paper,\n  Button,\n} from \"@material-ui/core\";\nimport sortPlayersByScore from \"../../helpers/sortPlayersByScore\";\n\nconst ScoreBoard = (props) => {\n  const [playersOrdered, setPlayersOrdered] = useState([]);\n\n  useEffect(() => {\n    let currentPlayers = [...props.gameState.players];\n\n    setPlayersOrdered(sortPlayersByScore(currentPlayers));\n  }, [props.gameState.players]);\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"flex-center\"\n        alignItems=\"center\"\n      >\n        <Paper elevation={5} style={{ padding: \"10px\" }}>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"flex-center\"\n            alignItems=\"center\"\n          >\n            <Typography variant=\"h3\" align=\"center\">\n              {props.gameState.currentRound == props.gameState.rounds &&\n                \"Final \"}\n              Scores\n            </Typography>\n            <List>\n              {playersOrdered.map((player) => (\n                <ListItem alignItems=\"flex-start\">\n                  <ListItemAvatar>\n                    <Avatar\n                      style={{\n                        backgroundColor: player.colour,\n                        display: \"inline-flex\",\n                        marginRight: \"10px\",\n                        color: \"black\",\n                      }}\n                    >\n                      {player.name[0]}\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={player.name}\n                    secondary={player.score || 0}\n                  />\n                </ListItem>\n              ))}\n            </List>\n\n            {props.gameState.currentRound != props.gameState.rounds && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {}}\n                alignItems=\"center\"\n                onClick={() => {\n                  props.updateGameState({\n                    currentRound: props.gameState.currentRound + 1,\n                    //playerCounter: props.gameState.playerCounter + 1,\n                    scoreBoard: false,\n                  });\n                }}\n              >\n                Next Round\n              </Button>\n            )}\n          </Grid>\n        </Paper>\n      </Grid>\n    </>\n  );\n};\n\nexport default ScoreBoard;\n","import React, { useState, useEffect } from \"react\";\nimport generateQuestions from \"../helpers/generateQuestions\";\nimport CustomAppBar from \"./CustomAppBar\";\nimport SetupGame from \"./gameComponents/SetupGame\";\nimport Task from \"./gameComponents/Task\";\nimport ScoreBoard from \"./gameComponents/ScoreBoard\";\n\nconst Game = () => {\n  const [gameState, setGameState] = useState({\n    players: [],\n    started: false,\n    questions: [],\n    rounds: 4,\n    currentRound: 1,\n    playerCounter: 0,\n  });\n\n  const updateGameState = (newValue) => {\n    setGameState({ ...gameState, ...newValue });\n  };\n\n  //Setup Questions When Game Starts\n  useEffect(() => {\n    if (gameState.started) {\n      //Load All Questions into gamestate in random order\n      let generatedQuestions = generateQuestions();\n      updateGameState({\n        questions: generatedQuestions,\n        currentRound: 1,\n        scoreBoard: false,\n      });\n    }\n  }, [gameState.started]);\n\n  //Count rounds and goes\n  useEffect(() => {\n    if (gameState.playerCounter % gameState.players.length === 0)\n      updateGameState({\n        //currentRound: gameState.currentRound + 1,\n        scoreBoard: true,\n      });\n  }, [gameState.playerCounter]);\n\n  return (\n    <>\n      <CustomAppBar gameState={gameState} />\n      <div style={{ height: \"10px\" }} />\n      {!gameState.started && (\n        <SetupGame gameState={gameState} updateGameState={updateGameState} />\n      )}\n      {gameState.started && !gameState.scoreBoard && (\n        <Task\n          gameState={gameState}\n          updateGameState={updateGameState}\n          style={{}}\n        />\n      )}\n\n      {gameState.started && gameState.scoreBoard && (\n        <ScoreBoard gameState={gameState} updateGameState={updateGameState} />\n      )}\n    </>\n  );\n};\n\nexport default Game;\n","import {\n  AppBar,\n  createMuiTheme,\n  CssBaseline,\n  MuiThemeProvider,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport CustomAppBar from \"./CustomAppBar\";\nimport Game from \"./Game\";\n\nconst Home = (props) => {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: \"#eee\",\n      },\n    },\n  });\n\n  return (\n    <>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Game />\n      </MuiThemeProvider>\n    </>\n  );\n};\n\nexport default Home;\n","import { Button } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  const [players, setPlayers] = useState([]);\n\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}