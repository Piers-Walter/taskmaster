{"version":3,"sources":["components/CustomAppBar.jsx","components/gameComponents/EnterPlayers.jsx","components/Game.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["CustomAppBar","AppBar","position","Toolbar","Typography","variant","EnterPlayers","props","useState","playerName","setPlayerName","submitPressed","setsubmitPressed","Grid","container","direction","justify","alignItems","spacing","item","TextField","label","value","onChange","e","target","error","Button","color","onClick","trim","players","gameState","push","name","updateGameState","map","player","playerIndex","Card","CardContent","HighlightOffRounded","style","verticalAlign","splice","Game","setGameState","height","newValue","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qPAiBeA,EAZM,WACjB,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,iB,wDC4EDC,EA1EM,SAACC,GAAW,IAAD,EACMC,mBAAS,IADf,mBACvBC,EADuB,KACXC,EADW,OAEYF,oBAAS,GAFrB,mBAEvBG,EAFuB,KAERC,EAFQ,KAI9B,OACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,QAAQ,aACRC,WAAW,SACXC,QAAS,GAET,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CACEf,QAAQ,WACRgB,MAAM,cACNC,MAAOb,EACPc,SAAU,SAACC,GACTd,EAAcc,EAAEC,OAAOH,OACvBV,GAAiB,IAEnBc,OAAQjB,GAAcE,KAG1B,kBAACE,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACQ,EAAA,EAAD,CACEtB,QAAQ,YACRuB,MAAM,UACNC,QAAS,WACP,GAAKpB,EAAWqB,OAAhB,CAKA,IAAIC,EAAUxB,EAAMyB,UAAUD,QAC9BA,EAAQE,KAAK,CAAEC,KAAMzB,IAErBF,EAAM4B,gBAAgB,CACpBJ,QAASA,IAGXrB,EAAc,SAXZE,GAAiB,KALvB,eAuBDL,EAAMyB,UAAUD,QAAQK,KAAI,SAACC,EAAQC,GACpC,OACE,kBAACzB,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACoB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACpC,EAAA,EAAD,KACGiC,EAAOH,KADV,OAGE,kBAACO,EAAA,EAAD,CACEC,MAAO,CAAEC,cAAe,UACxBd,QAAS,WACP,IAAIE,EAAUxB,EAAMyB,UAAUD,QAC9BA,EAAQa,OAAON,EAAa,GAC5B/B,EAAM4B,gBAAgB,CAAEJ,QAASA,gBCtDxCc,EAfF,WAAO,IAAD,EACiBrC,mBAAS,CAAEuB,QAAS,KADrC,mBACVC,EADU,KACCc,EADD,KAOjB,OACE,oCACE,yBAAKJ,MAAO,CAAEK,OAAQ,UACtB,kBAAC,EAAD,CAAcf,UAAWA,EAAWG,gBAPhB,SAACa,GACvBF,EAAa,2BAAKd,GAAcgB,SCOrBC,EATF,SAAC1C,GACZ,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCMS2C,MAVf,WAAgB,IAAD,EACiB1C,mBAAS,IAD1B,mBAGb,OAHa,UAIX,oCACE,kBAAC,EAAD,QCEc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,c","file":"static/js/main.4436f9d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Typography } from '@material-ui/core';\r\nimport { Toolbar } from '@material-ui/core';\r\n\r\nconst CustomAppBar = () => {\r\n    return ( \r\n        <AppBar position=\"sticky\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\">\r\n                    Taskmaster\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n     );\r\n}\r\n \r\nexport default CustomAppBar;","import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { HighlightOffRounded } from \"@material-ui/icons\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\n\r\nconst EnterPlayers = (props) => {\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [submitPressed, setsubmitPressed] = useState(false);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"flex-start\"\r\n      alignItems=\"center\"\r\n      spacing={2}\r\n    >\r\n      <Grid item>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"Player Name\"\r\n          value={playerName}\r\n          onChange={(e) => {\r\n            setPlayerName(e.target.value);\r\n            setsubmitPressed(false);\r\n          }}\r\n          error={!playerName && submitPressed}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            if (!playerName.trim()) {\r\n              setsubmitPressed(true);\r\n              return;\r\n            }\r\n\r\n            let players = props.gameState.players;\r\n            players.push({ name: playerName });\r\n\r\n            props.updateGameState({\r\n              players: players,\r\n            });\r\n\r\n            setPlayerName(\"\");\r\n          }}\r\n        >\r\n          Add Player\r\n        </Button>\r\n      </Grid>\r\n\r\n      {props.gameState.players.map((player, playerIndex) => {\r\n        return (\r\n          <Grid item>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography>\r\n                  {player.name}\r\n                  &nbsp;\r\n                  <HighlightOffRounded\r\n                    style={{ verticalAlign: \"bottom\" }}\r\n                    onClick={() => {\r\n                      let players = props.gameState.players;\r\n                      players.splice(playerIndex, 1);\r\n                      props.updateGameState({ players: players });\r\n                    }}\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EnterPlayers;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport EnterPlayers from \"./gameComponents/EnterPlayers\";\r\n\r\nconst Game = () => {\r\n  const [gameState, setGameState] = useState({ players: [] });\r\n\r\n  const updateGameState = (newValue) => {\r\n    setGameState({ ...gameState, ...newValue });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: \"10px\" }} />\r\n      <EnterPlayers gameState={gameState} updateGameState={updateGameState} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import { AppBar, Typography } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomAppBar from \"./CustomAppBar\";\r\nimport Game from \"./Game\";\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <>\r\n      <CustomAppBar />\r\n      <Game />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Home from \"./components/Home\";\r\n\r\nfunction App() {\r\n  const [players, setPlayers] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <Home />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}